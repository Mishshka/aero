from pathlib import Path
import xml.etree.ElementTree as ET

def read_qgis_qmd_file(file_path):
    path = Path(file_path)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª?
    if not path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path.absolute()}")
        return

    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {path.absolute()}")

    try:
        tree = ET.parse(path)
        root = tree.getroot()
        print(f"üìÑ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ö–æ—Ä–Ω–µ–≤–æ–π —Ç–µ–≥: {root.tag}")
    except ET.ParseError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    def safe_find_text(element, path, default="–Ω–µ –∑–∞–¥–∞–Ω–æ"):
        found = element.find(path)
        return found.text.strip() if found is not None and found.text else default

    print("\nüìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ QGIS:")
    print(f"  –í–µ—Ä—Å–∏—è QGIS: {root.get('version', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    print(f"  –¢–∏–ø: {safe_find_text(root, 'type')}")
    print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {safe_find_text(root, 'title')}")
    print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {safe_find_text(root, 'abstract')}")
    print(f"  –Ø–∑—ã–∫: {safe_find_text(root, 'language')}")

    # –ö–æ–Ω—Ç–∞–∫—Ç
    contact = root.find("contact")
    if contact is not None:
        name = safe_find_text(contact, "name")
        email = safe_find_text(contact, "email")
        org = safe_find_text(contact, "organization")
        print(f"  –ö–æ–Ω—Ç–∞–∫—Ç: {name} ({org}), email: {email}")

    # CRS (—Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
    crs = root.find("crs/spatialrefsys")
    if crs is not None:
        srid = safe_find_text(crs, "srid")
        authid = safe_find_text(crs, "authid")
        desc = safe_find_text(crs, "description")
        print(f"  CRS: SRID={srid}, AUTHID={authid}, –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")

    # Extent (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
    extent = root.find("extent/spatial")
    if extent is not None:
        crs = extent.get("crs", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
        minx = extent.get("minx", "?")
        maxx = extent.get("maxx", "?")
        miny = extent.get("miny", "?")
        maxy = extent.get("maxy", "?")
        print(f"  Extent (CRS: {crs}):")
        print(f"    X: {minx} ‚Üí {maxx}")
        print(f"    Y: {miny} ‚Üí {maxy}")

    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
    period = root.find("extent/temporal/period")
    if period is not None:
        start = safe_find_text(period, "start", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
        end = safe_find_text(period, "end", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
        print(f"  –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥: {start} ‚Äî {end}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    file_path = "class_part.qmd"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ –∏–º—è —Å–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞
    read_qgis_qmd_file(file_path)