
import xml.etree.ElementTree as ET
from pathlib import Path

def read_kml_file_advanced(file_path):
    path = Path(file_path)
    if not path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path.absolute()}")
        return

    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {path.absolute()}")

    try:
        with open(path, 'r', encoding='utf-8') as file:
            content = file.read()
        print(f"üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω. –î–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        return

    # –£–±–∏—Ä–∞–µ–º namespace –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–±–ª–µ–º!)
    content_clean = content
    # –£–¥–∞–ª—è–µ–º xmlns, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏
    content_clean = content_clean.replace('xmlns="http://www.opengis.net/kml/2.2"', '')
    content_clean = content_clean.strip()

    try:
        root = ET.fromstring(content_clean)
    except ET.ParseError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        return

    print(f"‚úÖ XML —Ä–∞—Å–ø–∞—Ä—à–µ–Ω. –ö–æ—Ä–Ω–µ–≤–æ–π —Ç–µ–≥: {root.tag}")

    placemarks = root.findall(".//Placemark")
    print(f"üìç –ù–∞–π–¥–µ–Ω–æ Placemark: {len(placemarks)}")

    for i, pm in enumerate(placemarks):
        name_elem = pm.find("name")
        name = (name_elem.text if name_elem is not None and name_elem.text else f"Placemark_{i}")

        print(f"\nüìå {name}:")

        # –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞—Ö –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        found = False

        # 1. Point
        point = pm.find("Point")
        if point is not None:
            coord_elem = point.find("coordinates")
            if coord_elem is not None and coord_elem.text:
                coords = coord_elem.text.strip()
                try:
                    lon, lat, *alt = map(str.strip, coords.split(','))
                    lat = float(lat)
                    lon = float(lon)
                    alt = float(alt[0]) if alt else "–ù/–î"
                    print(f"  üìç –¢–æ—á–∫–∞: —à–∏—Ä–æ—Ç–∞={lat:.6f}, –¥–æ–ª–≥–æ—Ç–∞={lon:.6f}, –≤—ã—Å–æ—Ç–∞={alt}")
                    found = True
                except:
                    print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coords}")

        # 2. LineString (—á–∞—Å—Ç–æ ‚Äî —Ç—Ä–µ–∫ –ø–æ–ª–µ—Ç–∞)
        linestring = pm.find("LineString")
        if linestring is not None:
            coord_elem = linestring.find("coordinates")
            if coord_elem is not None and coord_elem.text:
                coords_text = coord_elem.text.strip()
                print(f"  üõ§Ô∏è –õ–∏–Ω–∏—è (LineString): –Ω–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≤—Å–µ–≥–æ —Ç–æ—á–µ–∫: {coords_text.count(',') + 1})")
                # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é
                points = [p.strip().split(',') for p in coords_text.split() if p.strip()]
                if points:
                    first = points[0]
                    last = points[-1]
                    try:
                        flon, flat = float(first[0]), float(first[1])
                        llon, llat = float(last[0]), float(last[1])
                        print(f"    –ù–∞—á–∞–ª–æ: {flat:.6f}, {flon:.6f}")
                        print(f"    –ö–æ–Ω–µ—Ü:  {llat:.6f}, {llon:.6f}")
                        if len(points) > 10:
                            print(f"    –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(points)}")
                        found = True
                    except:
                        print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ª–∏–Ω–∏–∏")

        # 3. Polygon (–æ–±–ª–∞—Å—Ç—å —Å—ä–µ–º–∫–∏)
        polygon = pm.find("Polygon")
        if polygon is not None:
            outer = polygon.find("outerBoundaryIs/LinearRing/coordinates")
            if outer is not None and outer.text:
                coords_text = outer.text.strip()
                print(f"  üü¶ –ü–æ–ª–∏–≥–æ–Ω: –≤–Ω–µ—à–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Ç–æ—á–µ–∫: {coords_text.count(',') + 1})")
                points = [p.strip().split(',') for p in coords_text.split() if p.strip()]
                if points:
                    first = points[0]
                    try:
                        flon, flat = float(first[0]), float(first[1])
                        print(f"    –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞: {flat:.6f}, {flon:.6f}")
                        print(f"    –í—Å–µ–≥–æ –≤–µ—Ä—à–∏–Ω: {len(points)}")
                        found = True
                    except:
                        print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª–∏–≥–æ–Ω–∞")

        if not found:
            print("  ‚ùå –ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (Point, LineString, Polygon)")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    file_path = "2024_09_07_rRX_g201b20332_f003_.kml"
    read_kml_file_advanced(file_path)
